//beginfasl
(lisp_is_true((_f_not(null, (typeof _v_Lgears_databaseG != "undefined")))) ? ((_v_Lgears_databaseG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_set_method(null, _v_Lgears_databaseG, ".peer", (function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_obj, _v_Lgears_databaseG); return (((_f_slot(null, _v_obj, "peer")))); })))
(_f_Dpeer = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".peer")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_databaseG, ".peer-setter", (function(_key_, _v_obj, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_obj, _v_Lgears_databaseG); return (((_f_set_slot(null, _v_obj, "peer", _v_value)))); })))
(_f_Dpeer_setter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".peer-setter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_Lgears_databaseG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_Lgears_databaseG)))); }))
_v_Lgears_databaseG
(lisp_is_true((_f_not(null, (typeof _v_Lgears_result_setG != "undefined")))) ? ((_v_Lgears_result_setG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_set_method(null, _v_Lgears_result_setG, ".peer", (function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_obj, _v_Lgears_result_setG); return (((_f_slot(null, _v_obj, "peer")))); })))
(_f_Dpeer = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".peer")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_result_setG, ".peer-setter", (function(_key_, _v_obj, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_obj, _v_Lgears_result_setG); return (((_f_set_slot(null, _v_obj, "peer", _v_value)))); })))
(_f_Dpeer_setter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".peer-setter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_Lgears_result_setG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_Lgears_result_setG)))); }))
_v_Lgears_result_setG
(_f_Lgears_databaseG = (function(_key_, _v_name){ lisp_arity_min_max(arguments.length, 1, 2); if (arguments.length < 2) _v_name = undefined; return ((((function(_key_, _v_db){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_Dpeer_setter(null, _v_db,  google.gears.factory.create('beta.database') )),  (_f_Dpeer(null, _v_db)).open(_v_name) , _v_db)); })(null, (_f_make(null, _v_Lgears_databaseG)))))); }))
(_f_set_method(null, _v_Lgears_databaseG, "gears-execute", (function(_key_, _v_db, _v_stmt){ lisp_arity_min(arguments.length, 3); lisp_check_type(_v_db, _v_Lgears_databaseG); lisp_check_type(_v_stmt, _v_LstringG); var _v_args = lisp_rest_param(arguments, 2); return ((((function(_key_, _v_rs_peer){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_Lgears_result_setG(null, _v_rs_peer)))); })(null,  (_f_Dpeer(null, _v_db)).execute(_v_stmt, _v_args) )))); })))
(_f_gears_execute = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-execute")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_databaseG, "gears-close", (function(_key_, _v_db){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_db, _v_Lgears_databaseG); return (( (_f_Dpeer(null, _v_db)).close() )); })))
(_f_gears_close = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-close")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_databaseG, "gears-last-insert-row-id", (function(_key_, _v_db){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_db, _v_Lgears_databaseG); return (( (_f_Dpeer(null, _v_db)).lastInsertRowId )); })))
(_f_gears_last_insert_row_id = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-last-insert-row-id")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_databaseG, "gears-rows-affected", (function(_key_, _v_db){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_db, _v_Lgears_databaseG); return (( (_f_Dpeer(null, _v_db)).rowsAffected )); })))
(_f_gears_rows_affected = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-rows-affected")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_Lgears_result_setG = (function(_key_, _v_peer){ lisp_arity_min_max(arguments.length, 2, 2); return ((((function(_key_, _v_rs){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_Dpeer_setter(null, _v_rs, _v_peer)), _v_rs)); })(null, (_f_make(null, _v_Lgears_result_setG)))))); }))
(_f_set_method(null, _v_Lgears_result_setG, "gears-is-valid-row", (function(_key_, _v_rs){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_rs, _v_Lgears_result_setG); return (( (_f_Dpeer(null, _v_rs)).isValidRow() )); })))
(_f_gears_is_valid_row = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-is-valid-row")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_result_setG, "gears-next", (function(_key_, _v_rs){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_rs, _v_Lgears_result_setG); return (( (_f_Dpeer(null, _v_rs)).next() )); })))
(_f_gears_next = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-next")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_result_setG, "gears-close", (function(_key_, _v_rs){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_rs, _v_Lgears_result_setG); return (( (_f_Dpeer(null, _v_rs)).close() )); })))
(_f_gears_close = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-close")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_result_setG, "gears-field-count", (function(_key_, _v_rs){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_rs, _v_Lgears_result_setG); return (( (_f_Dpeer(null, _v_rs)).fieldCount() )); })))
(_f_gears_field_count = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-field-count")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_result_setG, "gears-field-name", (function(_key_, _v_rs, _v_field_index){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_rs, _v_Lgears_result_setG); lisp_check_type(_v_field_index, _v_LnumberG); return (( (_f_Dpeer(null, _v_rs)).fieldName(_v_field_index) )); })))
(_f_gears_field_name = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-field-name")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_result_setG, "gears-field", (function(_key_, _v_rs, _v_field_index){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_rs, _v_Lgears_result_setG); lisp_check_type(_v_field_index, _v_LnumberG); return (( (_f_Dpeer(null, _v_rs)).field(_v_field_index) )); })))
(_f_gears_field = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-field")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lgears_result_setG, "gears-field-by-name", (function(_key_, _v_rs, _v_field_name){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_rs, _v_Lgears_result_setG); lisp_check_type(_v_field_name, _v_LstringG); return (( (_f_Dpeer(null, _v_rs)).fieldByName(_v_field_name) )); })))
(_f_gears_field_by_name = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "gears-field-by-name")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
//endfasl

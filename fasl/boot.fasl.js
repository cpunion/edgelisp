//beginfasl
(lisp_set_macro_function("defmacro", (function(_key_, _v_defmacro_form){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"set-expander"}, (_f_compound_elt(null, _v_defmacro_form, 1)), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"%%lambda"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"%%form"})))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"compound-apply"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"%%lambda"}, (_f_compound_elt(null, _v_defmacro_form, 2)), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"progn"})), (_f_compound_slice(null, _v_defmacro_form, 3)))))))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"compound-slice"}, {"formt":"symbol","name":"%%form"}, {"formt":"number","n":"1"}))))))))))))))))); })))
(lisp_set_macro_function("lambda", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_sig){ lisp_arity_min(arguments.length, 2); var _v_body = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"%%lambda"}, _v_sig, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"progn"})), _v_body)))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("defun", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_name, _v_sig){ lisp_arity_min(arguments.length, 3); var _v_body = lisp_rest_param(arguments, 2); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"set-function"}, _v_name, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, _v_sig)), _v_body)))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("defvar", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_name, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"unless"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"bound?"}, _v_name)))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"defparameter"}, _v_name, _v_value)))))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("if", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_test, _v_consequent, _v_alternative){ lisp_arity_min_max(arguments.length, 3, 4); if (arguments.length < 4) _v_alternative = {"formt":"symbol","name":"null"}; return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"%%if"}, _v_test, _v_consequent, _v_alternative)))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("when", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_test){ lisp_arity_min(arguments.length, 2); var _v_consequent = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"if"}, _v_test, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"progn"})), _v_consequent)), {"formt":"symbol","name":"null"})))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("unless", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_test){ lisp_arity_min(arguments.length, 2); var _v_alternative = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"if"}, _v_test, {"formt":"symbol","name":"null"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"progn"})), _v_alternative)))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("let", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_bindings){ lisp_arity_min(arguments.length, 2); var _v_body = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"funcall"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, (_f_compound_map(null, (function(_key_, _v_b){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_compound_elt(null, _v_b, 0)))); }), _v_bindings)))), _v_body)))), (_f_compound_map(null, (function(_key_, _v_b){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_compound_elt(null, _v_b, 1)))); }), _v_bindings)))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("let*", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_bindings){ lisp_arity_min(arguments.length, 2); var _v_body = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"funcall"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, (_f_compound_map(null, (function(_key_, _v_b){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_compound_elt(null, _v_b, 0)))); }), _v_bindings)))), (_f_compound_map(null, (function(_key_, _v_b){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"set"}, (_f_compound_elt(null, _v_b, 0)), (_f_compound_elt(null, _v_b, 1)))))))); }), _v_bindings)), (_f_make_compound(null)), _v_body)))), (_f_compound_map(null, (function(_key_, _v_b){ lisp_arity_min_max(arguments.length, 2, 2); return (({"formt":"symbol","name":"null"})); }), _v_bindings)))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("while", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_test){ lisp_arity_min(arguments.length, 2); var _v_body = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"call-while"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, (_f_make_compound(null)), _v_test)))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, (_f_make_compound(null)))), _v_body)))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("block", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_name){ lisp_arity_min(arguments.length, 2); var _v_body = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"call-with-escape-function"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, (_f_append_compounds(null, (_f_make_compound(null, _v_name)))))), _v_body)))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("return-from", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_name, _v_value){ lisp_arity_min_max(arguments.length, 2, 3); if (arguments.length < 3) _v_value = {"formt":"symbol","name":"null"}; return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"funcall"}, _v_name, _v_value)))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("unwind-protect", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_protected){ lisp_arity_min(arguments.length, 2); var _v_cleanups = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"call-unwind-protected"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, (_f_make_compound(null)), _v_protected)))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, (_f_make_compound(null)))), _v_cleanups)))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("catch", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_handler_specs){ lisp_arity_min(arguments.length, 2); var _v_body = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"bind-handlers"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"list"})), (_f_compound_map(null, (function(_key_, _v_handler_spec){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"list"}, (_f_compound_elt(null, _v_handler_spec, 0)), (_f_compound_elt(null, _v_handler_spec, 1)))))))); }), _v_handler_specs)))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, (_f_make_compound(null)))), _v_body)))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(_f_not = (function(_key_, _v_x){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_x) ? _v_false : _v_true))); }))
((_f_setter_name = (function(_key_, _v_getter_name){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_string_concat(null, _v_getter_name, "-setter")))); })))
(lisp_set_macro_function("set", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_place, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); return (((lisp_is_true((_f_symbolQ(null, _v_place))) ? (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"%%set"}, _v_place, _v_value)))) : (_f_append_compounds(null, (_f_make_compound(null, (_f_string_to_symbol(null, (_f_setter_name(null, (_f_symbol_name(null, (_f_compound_elt(null, _v_place, 0)))))))))), (_f_compound_slice(null, _v_place, 1)), (_f_make_compound(null, _v_value))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("inc", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_place, _v_delta){ lisp_arity_min_max(arguments.length, 2, 3); if (arguments.length < 3) _v_delta = {"formt":"number","n":"1"}; return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"set"}, _v_place, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"+"}, _v_place, _v_delta)))))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("dec", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_place, _v_delta){ lisp_arity_min_max(arguments.length, 2, 3); if (arguments.length < 3) _v_delta = {"formt":"number","n":"1"}; return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"set"}, _v_place, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"-"}, _v_place, _v_delta)))))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("assert", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_test, _v_msg){ lisp_arity_min_max(arguments.length, 2, 3); if (arguments.length < 3) _v_msg = {"formt":"string","s":"assertion failed"}; return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"let"}, (_f_append_compounds(null, (_f_make_compound(null, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"result"}, _v_test)))))))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"if"}, {"formt":"symbol","name":"result"}, {"formt":"symbol","name":"result"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"progn"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"print"}, _v_msg)))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"print"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"quote"}, _v_test)))))))))))))))))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("assert-eq", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_a, _v_b){ lisp_arity_min_max(arguments.length, 3, 3); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"assert"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"eq"}, _v_a, _v_b)))))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
((_f_defclass_do_slot = (function(_key_, _v_class_name, _v_slot){ lisp_arity_min_max(arguments.length, 3, 3); return ((((function(_key_, _v_slot_name, _v_slot_name_form, _v_getter_name, _v_setter_name){ lisp_arity_min_max(arguments.length, 5, 5); return (((_v_slot_name = (_f_symbol_name(null, _v_slot))), (_v_slot_name_form = (_f_string_to_form(null, _v_slot_name))), (_v_getter_name = (_f_string_concat(null, ".", _v_slot_name))), (_v_setter_name = (_f_setter_name(null, _v_getter_name))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"progn"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"defmethod"}, (_f_string_to_symbol(null, _v_getter_name)), (_f_append_compounds(null, (_f_make_compound(null, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"obj"}, _v_class_name)))))))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"slot"}, {"formt":"symbol","name":"obj"}, _v_slot_name_form)))))))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"defmethod"}, (_f_string_to_symbol(null, _v_setter_name)), (_f_append_compounds(null, (_f_make_compound(null, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"obj"}, _v_class_name)))), {"formt":"symbol","name":"value"})))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"set-slot"}, {"formt":"symbol","name":"obj"}, _v_slot_name_form, {"formt":"symbol","name":"value"})))))))))))))); })(null, _v_null, _v_null, _v_null, _v_null)))); })))
(lisp_set_macro_function("defclass", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_name_and_super, _v_slots){ lisp_arity_min_max(arguments.length, 2, 3); if (arguments.length < 3) _v_slots = {"formt":"compound","elts":[]}; return ((((function(_key_, _v_class_name, _v_superclass){ lisp_arity_min_max(arguments.length, 3, 3); return (((lisp_is_true((_f_symbolQ(null, _v_name_and_super))) ? ((_v_class_name = _v_name_and_super), (_v_superclass = _v_null)) : ((_v_class_name = (_f_compound_elt(null, _v_name_and_super, 0))), (_v_superclass = (_f_compound_elt(null, _v_name_and_super, 1))))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"progn"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"when"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"not"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"bound?"}, _v_class_name)))))))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"set"}, _v_class_name, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"make-class"})))))))))))), (lisp_is_true(_v_superclass) ? (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"set-superclass"}, _v_class_name, _v_superclass)))) : {"formt":"symbol","name":"null"}))), (_f_compound_map(null, (function(_key_, _v_slot){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_defclass_do_slot(null, _v_class_name, _v_slot)))); }), _v_slots)), (_f_make_compound(null, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"defun"}, _v_class_name, (_f_make_compound(null)), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"make"}, _v_class_name)))))))), _v_class_name)))))); })(null, _v_null, _v_null)))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("defmethod", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_name, _v_params){ lisp_arity_min(arguments.length, 3); var _v_body = lisp_rest_param(arguments, 2); return ((((function(_key_, _v_param, _v_class, _v_name_string){ lisp_arity_min_max(arguments.length, 4, 4); return (((_v_param = (_f_compound_elt(null, _v_params, 0))), (_v_class = (lisp_is_true((_f_compoundQ(null, _v_param))) ? (_f_compound_elt(null, _v_param, 1)) : (lisp_is_true((_f_symbolQ(null, _v_param))) ? _v_param : ((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"symbol","name":"false"})))))); })(null, _v_false))))), (_v_name_string = (_f_string_to_form(null, (_f_symbol_name(null, _v_name))))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"progn"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"set-method"}, _v_class, _v_name_string, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, _v_params)), _v_body)))))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"defgeneric"}, _v_name)))))))))); })(null, _v_null, _v_null, _v_null)))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("defgeneric", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_name){ lisp_arity_min(arguments.length, 2); var _v_args = lisp_rest_param(arguments, 1); return ((((function(_key_, _v_name_string){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"defun"}, _v_name, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"&fast"}, {"formt":"symbol","name":"fast-arguments"})))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"let"}, (_f_append_compounds(null, (_f_make_compound(null, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"obj"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"list-elt"}, {"formt":"symbol","name":"fast-arguments"}, {"formt":"number","n":"1"})))))))))))), (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"fast-apply"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"get-method"}, {"formt":"symbol","name":"obj"}, _v_name_string)))), {"formt":"symbol","name":"fast-arguments"})))))))))))))); })(null, (_f_string_to_form(null, (_f_symbol_name(null, _v_name)))))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_set_macro_function("deferror", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_name){ lisp_arity_min(arguments.length, 2); var _v_slots = lisp_rest_param(arguments, 1); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"defclass"}, (_f_append_compounds(null, (_f_make_compound(null, _v_name, {"formt":"symbol","name":"<error>"})))))), _v_slots)))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
(lisp_is_true((_f_not(null, (typeof _v_LobjectG != "undefined")))) ? ((_v_LobjectG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_LobjectG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LobjectG)))); }))
_v_LobjectG
(lisp_is_true((_f_not(null, (typeof _v_LexceptionG != "undefined")))) ? ((_v_LexceptionG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_LexceptionG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LexceptionG)))); }))
_v_LexceptionG
(lisp_is_true((_f_not(null, (typeof _v_LerrorG != "undefined")))) ? ((_v_LerrorG = (_f_make_class(null)))) : _v_null)
(_f_set_superclass(null, _v_LerrorG, _v_LexceptionG))
(_f_LerrorG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LerrorG)))); }))
_v_LerrorG
(lisp_is_true((_f_not(null, (typeof _v_LwarningG != "undefined")))) ? ((_v_LwarningG = (_f_make_class(null)))) : _v_null)
(_f_set_superclass(null, _v_LwarningG, _v_LexceptionG))
(_f_LwarningG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LwarningG)))); }))
_v_LwarningG
(lisp_is_true((_f_not(null, (typeof _v_LrestartG != "undefined")))) ? ((_v_LrestartG = (_f_make_class(null)))) : _v_null)
(_f_set_superclass(null, _v_LrestartG, _v_LexceptionG))
(_f_LrestartG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LrestartG)))); }))
_v_LrestartG
(lisp_is_true((_f_not(null, (typeof _v_Lfailed_assertionG != "undefined")))) ? ((_v_Lfailed_assertionG = (_f_make_class(null)))) : _v_null)
(_f_set_superclass(null, _v_Lfailed_assertionG, _v_LerrorG))
(_f_Lfailed_assertionG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_Lfailed_assertionG)))); }))
_v_Lfailed_assertionG
(lisp_is_true((_f_not(null, (typeof _v_LdictG != "undefined")))) ? ((_v_LdictG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_LdictG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LdictG)))); }))
_v_LdictG
(_f_get = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "get")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_put = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "put")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_has_key = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "has-key")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(lisp_is_true((_f_not(null, (typeof _v_Lstring_dictG != "undefined")))) ? ((_v_Lstring_dictG = (_f_make_class(null)))) : _v_null)
(_f_set_superclass(null, _v_Lstring_dictG, _v_LdictG))
(_f_Lstring_dictG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_Lstring_dictG)))); }))
_v_Lstring_dictG
(_f_set_method(null, _v_Lstring_dictG, "get", (function(_key_, _v_dict, _v_key, _v_default){ lisp_arity_min_max(arguments.length, 3, 4); lisp_check_type(_v_dict, _v_Lstring_dictG); lisp_check_type(_v_key, _v_LstringG); if (arguments.length < 4) _v_default = undefined; return (((lisp_is_true((_f_has_key(null, _v_dict, _v_key))) ? (_f_string_dict_get(null, _v_dict, _v_key)) : _v_default))); })))
(_f_get = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "get")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lstring_dictG, "put", (function(_key_, _v_dict, _v_key, _v_value){ lisp_arity_min_max(arguments.length, 4, 4); lisp_check_type(_v_dict, _v_Lstring_dictG); lisp_check_type(_v_key, _v_LstringG); return (((_f_string_dict_put(null, _v_dict, _v_key, _v_value)))); })))
(_f_put = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "put")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lstring_dictG, "has-key", (function(_key_, _v_dict, _v_key){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_dict, _v_Lstring_dictG); lisp_check_type(_v_key, _v_LstringG); return (((_f_string_dict_has_key(null, _v_dict, _v_key)))); })))
(_f_has_key = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "has-key")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(lisp_is_true((_f_not(null, (typeof _v_LlistG != "undefined")))) ? ((_v_LlistG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_LlistG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LlistG)))); }))
_v_LlistG
(_f_LlistG = (function(_key_){ lisp_arity_min(arguments.length, 1); var _v_args = lisp_rest_param(arguments, 0); return (((_f_apply(null, _f_list, _v_args)))); }))
(_f_set_method(null, _v_LlistG, "iter", (function(_key_, _v_list){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_list, _v_LlistG); return (((_f_Llist_iterG(null, _v_list)))); })))
(_f_iter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "iter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_LlistG, "len", (function(_key_, _v_list){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_list, _v_LlistG); return (((_f_list_len(null, _v_list)))); })))
(_f_len = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "len")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_LlistG, "elt", (function(_key_, _v_list, _v_i){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_list, _v_LlistG); lisp_check_type(_v_i, _v_LnumberG); return (((_f_list_elt(null, _v_list, _v_i)))); })))
(_f_elt = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "elt")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_LlistG, "add", (function(_key_, _v_list, _v_elt){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_list, _v_LlistG); return (((_f_list_add(null, _v_list, _v_elt)))); })))
(_f_add = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "add")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(lisp_is_true((_f_not(null, (typeof _v_Llist_iterG != "undefined")))) ? ((_v_Llist_iterG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_set_method(null, _v_Llist_iterG, ".list", (function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_obj, _v_Llist_iterG); return (((_f_slot(null, _v_obj, "list")))); })))
(_f_Dlist = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".list")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Llist_iterG, ".list-setter", (function(_key_, _v_obj, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_obj, _v_Llist_iterG); return (((_f_set_slot(null, _v_obj, "list", _v_value)))); })))
(_f_Dlist_setter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".list-setter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Llist_iterG, ".i", (function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_obj, _v_Llist_iterG); return (((_f_slot(null, _v_obj, "i")))); })))
(_f_Di = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".i")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Llist_iterG, ".i-setter", (function(_key_, _v_obj, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_obj, _v_Llist_iterG); return (((_f_set_slot(null, _v_obj, "i", _v_value)))); })))
(_f_Di_setter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".i-setter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_Llist_iterG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_Llist_iterG)))); }))
_v_Llist_iterG
(_f_Llist_iterG = (function(_key_, _v_list){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_list, _v_LlistG); return ((((function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_Dlist_setter(null, _v_iter, _v_list)), (_f_Di_setter(null, _v_iter, 0)), _v_iter)); })(null, (_f_make(null, _v_Llist_iterG)))))); }))
(_f_set_method(null, _v_Llist_iterG, "has-next", (function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_iter, _v_Llist_iterG); return (((_f_L(null, (_f_Di(null, _v_iter)), (_f_len(null, (_f_Dlist(null, _v_iter)))))))); })))
(_f_has_next = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "has-next")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Llist_iterG, "next", (function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_iter, _v_Llist_iterG); return (((_f_Di_setter(null, _v_iter, (_f_P(null, (_f_Di(null, _v_iter)), 1)))))); })))
(_f_next = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "next")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Llist_iterG, "now", (function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_iter, _v_Llist_iterG); return (((_f_elt(null, (_f_Dlist(null, _v_iter)), (_f_Di(null, _v_iter)))))); })))
(_f_now = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "now")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lcompound_formG, "elt", (function(_key_, _v_form, _v_i){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_form, _v_Lcompound_formG); return (((_f_compound_elt(null, _v_form, _v_i)))); })))
(_f_elt = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "elt")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lcompound_formG, "iter", (function(_key_, _v_form){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_form, _v_Lcompound_formG); return (((_f_iter(null, (_f_compound_elts(null, _v_form)))))); })))
(_f_iter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "iter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_every = (function(_key_, _v_pred, _v_coll){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_pred, _v_LfunctionG); return (("Returns true iff every element of a collection satisfies the predicate.", (_f_call_with_escape_function(null, (function(_key_, _v_exit){ lisp_arity_min_max(arguments.length, 2, 2); return ((((function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_while(null, (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_has_next(null, _v_iter)))); }), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((lisp_is_true((_v_pred(null, (_f_now(null, _v_iter))))) ? _v_null : ((_v_exit(null, _v_false)))), (_f_next(null, _v_iter)))); }))))); })(null, (_f_iter(null, _v_coll)))), _v_true)); }))))); }))
(_f_each = (function(_key_, _v_fun){ lisp_arity_min(arguments.length, 2); lisp_check_type(_v_fun, _v_LfunctionG); var _v_colls = lisp_rest_param(arguments, 1); return (("Applies a function to the elements of one or more collections for\neffect.  The function is called with N positional arguments, each\ntaken from the collections from left to right.  The shortest\ncollection determines how many times the function is called.", (lisp_is_true((_f_eq(null, 1, (_f_len(null, _v_colls))))) ? ((function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_while(null, (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_has_next(null, _v_iter)))); }), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_v_fun(null, (_f_now(null, _v_iter)))), (_f_next(null, _v_iter)))); }))))); })(null, (_f_iter(null, (_f_elt(null, _v_colls, 0)))))) : ((function(_key_, _v_iters){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_while(null, (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_every(null, _f_has_next, _v_iters)))); }), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_apply(null, _v_fun, (_f_map(null, _f_now, _v_iters)))), (_f_each(null, _f_next, _v_iters)))); }))))); })(null, (_f_map(null, _f_iter, _v_colls))))))); }))
(_f_map = (function(_key_, _v_fun){ lisp_arity_min(arguments.length, 2); lisp_check_type(_v_fun, _v_LfunctionG); if (_key_) { if ("%into" in _key_) var _v_into = _key_["%into"]; else var _v_into = (_f_LlistG(null)); } else { var _v_into = (_f_LlistG(null)); } var _v_colls = lisp_rest_param(arguments, 1); return (("Applies a function to the elements of one or more collections and\nreturns a collection with the results of each application.  The\nfunction is called with N positional arguments, each taken from the\ncollections from left to right.  The shortest collection determines\nhow many times the function is called.  The `into' keyword argument\ncan be used to supply a different collection to hold the results.", (lisp_is_true((_f_eq(null, 1, (_f_len(null, _v_colls))))) ? ((function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_while(null, (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_has_next(null, _v_iter)))); }), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_add(null, _v_into, (_v_fun(null, (_f_now(null, _v_iter)))))), (_f_next(null, _v_iter)))); }))))); })(null, (_f_iter(null, (_f_elt(null, _v_colls, 0)))))) : ((function(_key_, _v_iters){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_while(null, (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_every(null, _f_has_next, _v_iters)))); }), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_add(null, _v_into, (_f_apply(null, _v_fun, (_f_map(null, _f_now, _v_iters)))))), (_f_each(null, _f_next, _v_iters)))); }))))); })(null, (_f_map(null, _f_iter, _v_colls))))), _v_into)); }))
(lisp_is_true((_f_not(null, (typeof _v_Lnumber_iterG != "undefined")))) ? ((_v_Lnumber_iterG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_set_method(null, _v_Lnumber_iterG, ".i", (function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_obj, _v_Lnumber_iterG); return (((_f_slot(null, _v_obj, "i")))); })))
(_f_Di = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".i")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lnumber_iterG, ".i-setter", (function(_key_, _v_obj, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_obj, _v_Lnumber_iterG); return (((_f_set_slot(null, _v_obj, "i", _v_value)))); })))
(_f_Di_setter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".i-setter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lnumber_iterG, ".max", (function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_obj, _v_Lnumber_iterG); return (((_f_slot(null, _v_obj, "max")))); })))
(_f_Dmax = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".max")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lnumber_iterG, ".max-setter", (function(_key_, _v_obj, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_obj, _v_Lnumber_iterG); return (((_f_set_slot(null, _v_obj, "max", _v_value)))); })))
(_f_Dmax_setter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".max-setter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_Lnumber_iterG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_Lnumber_iterG)))); }))
_v_Lnumber_iterG
(_f_Lnumber_iterG = (function(_key_, _v_max){ lisp_arity_min_max(arguments.length, 2, 2); return ((((function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_Di_setter(null, _v_iter, 0)), (_f_Dmax_setter(null, _v_iter, _v_max)), _v_iter)); })(null, (_f_make(null, _v_Lnumber_iterG)))))); }))
(_f_set_method(null, _v_LnumberG, "iter", (function(_key_, _v_max){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_max, _v_LnumberG); return (((_f_Lnumber_iterG(null, _v_max)))); })))
(_f_iter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "iter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lnumber_iterG, "has-next", (function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_iter, _v_Lnumber_iterG); return (((_f_L(null, (_f_Di(null, _v_iter)), (_f_Dmax(null, _v_iter)))))); })))
(_f_has_next = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "has-next")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lnumber_iterG, "now", (function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_iter, _v_Lnumber_iterG); return (((_f_Di(null, _v_iter)))); })))
(_f_now = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "now")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_Lnumber_iterG, "next", (function(_key_, _v_iter){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_iter, _v_Lnumber_iterG); return (((_f_Di_setter(null, _v_iter, (_f_P(null, (_f_Di(null, _v_iter)), 1)))))); })))
(_f_next = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "next")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(lisp_set_macro_function("dotimes", (function(_key_, _v_NNform){ lisp_arity_min_max(arguments.length, 2, 2); return ((_f_compound_apply(null, (function(_key_, _v_var_and_ct){ lisp_arity_min(arguments.length, 2); var _v_body = lisp_rest_param(arguments, 1); return ((((function(_key_, _v_var, _v_ct){ lisp_arity_min_max(arguments.length, 3, 3); return (((_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"each"}, (_f_append_compounds(null, (_f_make_compound(null, {"formt":"symbol","name":"lambda"}, (_f_append_compounds(null, (_f_make_compound(null, _v_var)))))), _v_body)), _v_ct)))))); })(null, (_f_elt(null, _v_var_and_ct, 0)), (_f_elt(null, _v_var_and_ct, 1)))))); }), (_f_compound_slice(null, _v_NNform, 1))))); })))
//endfasl

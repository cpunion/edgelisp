//beginfasl
(_v_ni_ct = 0)
(_f_each(null, (function(_key_, _v_num){ lisp_arity_min_max(arguments.length, 2, 2); return (((_v_ni_ct = (_f_P(null, _v_ni_ct, 1))))); }), 500))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"ni-ct"},{"formt":"number","n":"500"}]})))))); })(null, (_f_eq(null, _v_ni_ct, 500))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"alien"}," ","7"," ","*"," ","3"," "]},{"formt":"number","n":"21"}]})))))); })(null, (_f_eq(null,  7 * 3 , 21))))
(lisp_is_true((typeof _v_lisp_x != "undefined")) ? _v_null : ((_v_lisp_x = 2)))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"12"},{"formt":"compound","elts":[{"formt":"symbol","name":"alien"}," ",{"formt":"symbol","name":"lisp-x"}," ","+"," ","1","0"," "]}]})))))); })(null, (_f_eq(null, 12,  _v_lisp_x + 10 ))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"6"},{"formt":"compound","elts":[{"formt":"symbol","name":"alien"}," ",{"formt":"compound","elts":[{"formt":"symbol","name":"+"},{"formt":"symbol","name":"lisp-x"},{"formt":"compound","elts":[{"formt":"symbol","name":"alien"}," ","2"," ","*"," ",{"formt":"symbol","name":"lisp-x"}," "]}]}," "]}]})))))); })(null, (_f_eq(null, 6,  (_f_P(null, _v_lisp_x,  2 * _v_lisp_x )) ))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"string","s":"%"},{"formt":"compound","elts":[{"formt":"symbol","name":"alien"}," ","\"","%","\""," "]}]})))))); })(null, (_f_eq(null, "%",  "%" ))))
(lisp_is_true((typeof _v_l1 != "undefined")) ? _v_null : ((_v_l1 = (_f_list(null, 1, 2, 3)))))
(lisp_is_true((typeof _v_l2 != "undefined")) ? _v_null : ((_v_l2 = (_f_list(null, 1, 2, 3, 4)))))
(lisp_is_true((typeof _v_res != "undefined")) ? _v_null : ((_v_res = (_f_map(null, _f_P, _v_l1, _v_l2)))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"elt"},{"formt":"symbol","name":"res"},{"formt":"number","n":"0"}]},{"formt":"number","n":"2"}]})))))); })(null, (_f_eq(null, (_f_elt(null, _v_res, 0)), 2))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"elt"},{"formt":"symbol","name":"res"},{"formt":"number","n":"1"}]},{"formt":"number","n":"4"}]})))))); })(null, (_f_eq(null, (_f_elt(null, _v_res, 1)), 4))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"elt"},{"formt":"symbol","name":"res"},{"formt":"number","n":"2"}]},{"formt":"number","n":"6"}]})))))); })(null, (_f_eq(null, (_f_elt(null, _v_res, 2)), 6))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"len"},{"formt":"symbol","name":"res"}]},{"formt":"number","n":"3"}]})))))); })(null, (_f_eq(null, (_f_len(null, _v_res)), 3))))
(lisp_is_true((typeof _v_list != "undefined")) ? _v_null : ((_v_list = (_f_list(null, 1, 2, 3)))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"len"},{"formt":"symbol","name":"list"}]},{"formt":"number","n":"3"}]})))))); })(null, (_f_eq(null, (_f_len(null, _v_list)), 3))))
(lisp_is_true((typeof _v_list_ct != "undefined")) ? _v_null : ((_v_list_ct = 0)))
(_f_each(null, (function(_key_, _v_elt){ lisp_arity_min_max(arguments.length, 2, 2); return (((_v_list_ct = (_f_P(null, _v_list_ct, _v_elt))))); }), _v_list))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"list-ct"},{"formt":"number","n":"6"}]})))))); })(null, (_f_eq(null, _v_list_ct, 6))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"progn"},{"formt":"number","n":"1"},{"formt":"number","n":"2"},{"formt":"number","n":"3"}]},{"formt":"number","n":"3"}]})))))); })(null, (_f_eq(null, (1, 2, 3), 3))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"progn"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, (1), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"progn"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, undefined, _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[]}]}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (undefined); })(null)), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[]},{"formt":"number","n":"1"}]}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return ((1)); })(null)), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"x"}]},{"formt":"symbol","name":"x"}]},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_x){ lisp_arity_min_max(arguments.length, 2, 2); return ((_v_x)); })(null, 1)), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"x"},{"formt":"symbol","name":"&opt"},{"formt":"compound","elts":[{"formt":"symbol","name":"y"},{"formt":"symbol","name":"x"}]}]},{"formt":"symbol","name":"y"}]},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_x, _v_y){ lisp_arity_min_max(arguments.length, 2, 3); if (arguments.length < 3) _v_y = _v_x; return ((_v_y)); })(null, 1)), 1))))
(_f_test_x = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return ((117)); }))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"test-x"}]},{"formt":"number","n":"117"}]})))))); })(null, (_f_eq(null, (_f_test_x(null)), 117))))
(_f_test_y = (function(_key_, _v_y){ lisp_arity_min_max(arguments.length, 2, 2); return ((_v_y)); }))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"test-y"},{"formt":"number","n":"133"}]},{"formt":"number","n":"133"}]})))))); })(null, (_f_eq(null, (_f_test_y(null, 133)), 133))))
(lisp_is_true((_f_not(null, (typeof _v_Lmy_errorG != "undefined")))) ? ((_v_Lmy_errorG = (_f_make_class(null)))) : _v_null)
(_f_set_superclass(null, _v_Lmy_errorG, _v_LerrorG))
(_f_Lmy_errorG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_Lmy_errorG)))); }))
_v_Lmy_errorG
(lisp_is_true((_f_not(null, (typeof _v_Lyour_errorG != "undefined")))) ? ((_v_Lyour_errorG = (_f_make_class(null)))) : _v_null)
(_f_set_superclass(null, _v_Lyour_errorG, _v_LerrorG))
(_f_Lyour_errorG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_Lyour_errorG)))); }))
_v_Lyour_errorG
(lisp_is_true((typeof _v_test_counter != "undefined")) ? _v_null : ((_v_test_counter = 0)))
(_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lmy_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 1))); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_throw(null, (_f_Lmy_errorG(null)))))); })))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"test-counter"},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, _v_test_counter, 1))))
(_v_test_counter = 0)
(_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lyour_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 2))); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lmy_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 1))); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_throw(null, (_f_Lyour_errorG(null)))))); }))))); })))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"test-counter"},{"formt":"number","n":"2"}]})))))); })(null, (_f_eq(null, _v_test_counter, 2))))
(_v_test_counter = 0)
(_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lyour_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 2))); }))), (_f_list(null, _v_Lmy_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 1))); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_throw(null, (_f_Lyour_errorG(null)))))); })))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"test-counter"},{"formt":"number","n":"2"}]})))))); })(null, (_f_eq(null, _v_test_counter, 2))))
(_v_test_counter = 0)
(_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lyour_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 2))); }))), (_f_list(null, _v_Lmy_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 1))); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_throw(null, (_f_Lmy_errorG(null)))))); })))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"test-counter"},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, _v_test_counter, 1))))
(_v_test_counter = 0)
(_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lmy_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 1))); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lyour_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 2))); }))), (_f_list(null, _v_Lmy_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_next_handler(null)))); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_throw(null, (_f_Lmy_errorG(null)))))); }))))); })))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"test-counter"},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, _v_test_counter, 1))))
(_v_test_counter = 0)
(_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lmy_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return ((((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"test-counter"},{"formt":"number","n":"3"}]})))))); })(null, (_f_eq(null, _v_test_counter, 3)))))); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lyour_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 2))); }))), (_f_list(null, _v_Lmy_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (((_v_test_counter = 3), (_v_next_handler(null)))); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_throw(null, (_f_Lmy_errorG(null)))))); }))))); })))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"test-counter"},{"formt":"number","n":"3"}]})))))); })(null, (_f_eq(null, _v_test_counter, 3))))
(_f_foo = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return ((12)); }))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"function"},{"formt":"symbol","name":"foo"}]})))))); })(null, _f_foo))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"function"},{"formt":"symbol","name":"foo"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"function"},{"formt":"symbol","name":"foo"}]}]})))))); })(null, (_f_eq(null, _f_foo, _f_foo))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"function"},{"formt":"symbol","name":"foo"}]}]},{"formt":"number","n":"12"}]})))))); })(null, (_f_eq(null, (_f_foo(null)), 12))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"null"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"x"},{"formt":"number","n":"13"},{"formt":"compound","elts":[{"formt":"symbol","name":"return-from"},{"formt":"symbol","name":"x"}]},{"formt":"number","n":"12"}]}]})))))); })(null, (_f_eq(null, _v_null, (_f_call_with_escape_function(null, (function(_key_, _v_x){ lisp_arity_min_max(arguments.length, 2, 2); return ((13, (_v_x(null, _v_null)), 12)); })))))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"1"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"x"},{"formt":"compound","elts":[{"formt":"symbol","name":"return-from"},{"formt":"symbol","name":"x"},{"formt":"number","n":"1"}]}]}]})))))); })(null, (_f_eq(null, 1, (_f_call_with_escape_function(null, (function(_key_, _v_x){ lisp_arity_min_max(arguments.length, 2, 2); return (((_v_x(null, 1)))); })))))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"1"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"x"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"y"},{"formt":"compound","elts":[{"formt":"symbol","name":"return-from"},{"formt":"symbol","name":"x"},{"formt":"number","n":"1"}]}]}]}]})))))); })(null, (_f_eq(null, 1, (_f_call_with_escape_function(null, (function(_key_, _v_x){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_with_escape_function(null, (function(_key_, _v_y){ lisp_arity_min_max(arguments.length, 2, 2); return (((_v_x(null, 1)))); }))))); })))))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"2"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"x"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"y"},{"formt":"number","n":"2"}]}]}]})))))); })(null, (_f_eq(null, 2, (_f_call_with_escape_function(null, (function(_key_, _v_x){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_with_escape_function(null, (function(_key_, _v_y){ lisp_arity_min_max(arguments.length, 2, 2); return ((2)); }))))); })))))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"3"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"x"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"y"},{"formt":"number","n":"2"}]},{"formt":"number","n":"3"}]}]})))))); })(null, (_f_eq(null, 3, (_f_call_with_escape_function(null, (function(_key_, _v_x){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_with_escape_function(null, (function(_key_, _v_y){ lisp_arity_min_max(arguments.length, 2, 2); return ((2)); }))), 3)); })))))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"3"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"x"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"y"},{"formt":"compound","elts":[{"formt":"symbol","name":"return-from"},{"formt":"symbol","name":"y"},{"formt":"number","n":"4"}]}]},{"formt":"number","n":"3"}]}]})))))); })(null, (_f_eq(null, 3, (_f_call_with_escape_function(null, (function(_key_, _v_x){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_with_escape_function(null, (function(_key_, _v_y){ lisp_arity_min_max(arguments.length, 2, 2); return (((_v_y(null, 4)))); }))), 3)); })))))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"4"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"x"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"y"},{"formt":"compound","elts":[{"formt":"symbol","name":"return-from"},{"formt":"symbol","name":"y"},{"formt":"number","n":"4"}]}]}]}]})))))); })(null, (_f_eq(null, 4, (_f_call_with_escape_function(null, (function(_key_, _v_x){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_with_escape_function(null, (function(_key_, _v_y){ lisp_arity_min_max(arguments.length, 2, 2); return (((_v_y(null, 4)))); }))))); })))))))
(_f_jumper = (function(_key_, _v_exit){ lisp_arity_min_max(arguments.length, 2, 2); return (((_v_exit(null, 33)))); }))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"33"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"outer"},{"formt":"compound","elts":[{"formt":"symbol","name":"jumper"},{"formt":"symbol","name":"outer"}]}]}]})))))); })(null, (_f_eq(null, 33, (_f_call_with_escape_function(null, (function(_key_, _v_outer){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_jumper(null, _v_outer)))); })))))))
(lisp_is_true((_f_not(null, (typeof _v_Lanother_errorG != "undefined")))) ? ((_v_Lanother_errorG = (_f_make_class(null)))) : _v_null)
(_f_set_superclass(null, _v_Lanother_errorG, _v_LerrorG))
(_f_Lanother_errorG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_Lanother_errorG)))); }))
_v_Lanother_errorG
(lisp_is_true((typeof _v_unwind_ct != "undefined")) ? _v_null : ((_v_unwind_ct = 0)))
(_f_bind_handlers(null, (_f_list(null, (_f_list(null, _v_Lanother_errorG, (function(_key_, _v_e, _v_next_handler){ lisp_arity_min_max(arguments.length, 3, 3); return (undefined); }))))), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_call_unwind_protected(null, (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_throw(null, (_f_Lanother_errorG(null)))))); }), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_v_unwind_ct = 1))); }))))); })))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"unwind-ct"},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, _v_unwind_ct, 1))))
(_v_unwind_ct = 0)
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"2"},{"formt":"compound","elts":[{"formt":"symbol","name":"unwind-protect"},{"formt":"number","n":"2"},{"formt":"compound","elts":[{"formt":"symbol","name":"set"},{"formt":"symbol","name":"unwind-ct"},{"formt":"number","n":"1"}]}]}]})))))); })(null, (_f_eq(null, 2, (_f_call_unwind_protected(null, (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return ((2)); }), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_v_unwind_ct = 1))); })))))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"unwind-ct"},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, _v_unwind_ct, 1))))
(_v_unwind_ct = 0)
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"number","n":"12"},{"formt":"compound","elts":[{"formt":"symbol","name":"block"},{"formt":"symbol","name":"exit"},{"formt":"compound","elts":[{"formt":"symbol","name":"unwind-protect"},{"formt":"compound","elts":[{"formt":"symbol","name":"return-from"},{"formt":"symbol","name":"exit"},{"formt":"number","n":"12"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"set"},{"formt":"symbol","name":"unwind-ct"},{"formt":"number","n":"1"}]}]}]}]})))))); })(null, (_f_eq(null, 12, (_f_call_with_escape_function(null, (function(_key_, _v_exit){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_call_unwind_protected(null, (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_v_exit(null, 12)))); }), (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_v_unwind_ct = 1))); }))))); })))))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"symbol","name":"unwind-ct"},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, _v_unwind_ct, 1))))
(lisp_is_true((_f_not(null, (typeof _v_LfooG != "undefined")))) ? ((_v_LfooG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_LfooG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LfooG)))); }))
_v_LfooG
(lisp_is_true((typeof _v_foo != "undefined")) ? _v_null : ((_v_foo = (_f_LfooG(null)))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"slot"},{"formt":"symbol","name":"foo"},{"formt":"string","s":"slot1"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, (_f_slot(null, _v_foo, "slot1")), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"slot"},{"formt":"symbol","name":"foo"},{"formt":"string","s":"slot2"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, (_f_slot(null, _v_foo, "slot2")), _v_null))))
(_f_set_slot(null, _v_foo, "slot1", 1))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"slot"},{"formt":"symbol","name":"foo"},{"formt":"string","s":"slot1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, (_f_slot(null, _v_foo, "slot1")), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"slot"},{"formt":"symbol","name":"foo"},{"formt":"string","s":"slot2"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, (_f_slot(null, _v_foo, "slot2")), _v_null))))
(_f_set_slot(null, _v_foo, "slot1", _v_null))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"slot"},{"formt":"symbol","name":"foo"},{"formt":"string","s":"slot1"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, (_f_slot(null, _v_foo, "slot1")), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"slot"},{"formt":"symbol","name":"foo"},{"formt":"string","s":"slot2"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, (_f_slot(null, _v_foo, "slot2")), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"has-slot"},{"formt":"symbol","name":"foo"},{"formt":"string","s":"slot1"}]})))))); })(null, (_f_has_slot(null, _v_foo, "slot1"))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"not"},{"formt":"compound","elts":[{"formt":"symbol","name":"has-slot"},{"formt":"symbol","name":"foo"},{"formt":"string","s":"slot2"}]}]})))))); })(null, (_f_not(null, (_f_has_slot(null, _v_foo, "slot2"))))))
(lisp_is_true((_f_not(null, (typeof _v_LzG != "undefined")))) ? ((_v_LzG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_set_method(null, _v_LzG, ".a", (function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_obj, _v_LzG); return (((_f_slot(null, _v_obj, "a")))); })))
(_f_Da = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".a")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_LzG, ".a-setter", (function(_key_, _v_obj, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_obj, _v_LzG); return (((_f_set_slot(null, _v_obj, "a", _v_value)))); })))
(_f_Da_setter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".a-setter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_LzG, ".b", (function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_obj, _v_LzG); return (((_f_slot(null, _v_obj, "b")))); })))
(_f_Db = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".b")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_LzG, ".b-setter", (function(_key_, _v_obj, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_obj, _v_LzG); return (((_f_set_slot(null, _v_obj, "b", _v_value)))); })))
(_f_Db_setter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".b-setter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_LzG, ".c", (function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_obj, _v_LzG); return (((_f_slot(null, _v_obj, "c")))); })))
(_f_Dc = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".c")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_set_method(null, _v_LzG, ".c-setter", (function(_key_, _v_obj, _v_value){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_obj, _v_LzG); return (((_f_set_slot(null, _v_obj, "c", _v_value)))); })))
(_f_Dc_setter = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, ".c-setter")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
(_f_LzG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LzG)))); }))
_v_LzG
(lisp_is_true((typeof _v_z != "undefined")) ? _v_null : ((_v_z = (_f_LzG(null)))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":".a"},{"formt":"symbol","name":"z"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, (_f_Da(null, _v_z)), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":".b"},{"formt":"symbol","name":"z"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, (_f_Db(null, _v_z)), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":".c"},{"formt":"symbol","name":"z"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, (_f_Dc(null, _v_z)), _v_null))))
(_f_Da_setter(null, _v_z, 1))
(_f_Db_setter(null, _v_z, 2))
(_f_Dc_setter(null, _v_z, 3))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":".a"},{"formt":"symbol","name":"z"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, (_f_Da(null, _v_z)), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":".b"},{"formt":"symbol","name":"z"}]},{"formt":"number","n":"2"}]})))))); })(null, (_f_eq(null, (_f_Db(null, _v_z)), 2))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":".c"},{"formt":"symbol","name":"z"}]},{"formt":"number","n":"3"}]})))))); })(null, (_f_eq(null, (_f_Dc(null, _v_z)), 3))))
(lisp_is_true((_f_not(null, (typeof _v_LquuxG != "undefined")))) ? ((_v_LquuxG = (_f_make_class(null)))) : _v_null)
_v_null
(_f_LquuxG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LquuxG)))); }))
_v_LquuxG
(_f_set_method(null, _v_LquuxG, "m33", (function(_key_, _v_quux){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_quux, _v_LquuxG); return ((33)); })))
(_f_set_method(null, _v_LquuxG, "m44", (function(_key_, _v_quux){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_quux, _v_LquuxG); return ((44)); })))
(lisp_is_true((typeof _v_quux != "undefined")) ? _v_null : ((_v_quux = (_f_LquuxG(null)))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"get-method"},{"formt":"symbol","name":"quux"},{"formt":"string","s":"m33"}]},{"formt":"symbol","name":"quux"}]},{"formt":"number","n":"33"}]})))))); })(null, (_f_eq(null, ((_f_get_method(null, _v_quux, "m33"))(null, _v_quux)), 33))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"get-method"},{"formt":"symbol","name":"quux"},{"formt":"string","s":"m44"}]},{"formt":"symbol","name":"quux"}]},{"formt":"number","n":"44"}]})))))); })(null, (_f_eq(null, ((_f_get_method(null, _v_quux, "m44"))(null, _v_quux)), 44))))
(lisp_is_true((_f_not(null, (typeof _v_LsubG != "undefined")))) ? ((_v_LsubG = (_f_make_class(null)))) : _v_null)
(_f_set_superclass(null, _v_LsubG, _v_LquuxG))
(_f_LsubG = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); return (((_f_make(null, _v_LsubG)))); }))
_v_LsubG
(lisp_is_true((typeof _v_sub != "undefined")) ? _v_null : ((_v_sub = (_f_LsubG(null)))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"get-method"},{"formt":"symbol","name":"sub"},{"formt":"string","s":"m33"}]},{"formt":"symbol","name":"sub"}]},{"formt":"number","n":"33"}]})))))); })(null, (_f_eq(null, ((_f_get_method(null, _v_sub, "m33"))(null, _v_sub)), 33))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"get-method"},{"formt":"symbol","name":"sub"},{"formt":"string","s":"m44"}]},{"formt":"symbol","name":"sub"}]},{"formt":"number","n":"44"}]})))))); })(null, (_f_eq(null, ((_f_get_method(null, _v_sub, "m44"))(null, _v_sub)), 44))))
(_f_set_method(null, _v_LquuxG, "m55", (function(_key_, _v_quux){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_quux, _v_LquuxG); return ((55)); })))
(_f_m55 = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "m55")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"m55"},{"formt":"symbol","name":"quux"}]},{"formt":"number","n":"55"}]})))))); })(null, (_f_eq(null, (_f_m55(null, _v_quux)), 55))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"m55"},{"formt":"symbol","name":"sub"}]},{"formt":"number","n":"55"}]})))))); })(null, (_f_eq(null, (_f_m55(null, _v_sub)), 55))))
(_f_set_method(null, _v_LquuxG, "m66", (function(_key_, _v_quux){ lisp_arity_min_max(arguments.length, 2, 2); lisp_check_type(_v_quux, _v_LquuxG); return ((66)); })))
(_f_m66 = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "m66")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"m66"},{"formt":"symbol","name":"quux"}]},{"formt":"number","n":"66"}]})))))); })(null, (_f_eq(null, (_f_m66(null, _v_quux)), 66))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"m66"},{"formt":"symbol","name":"sub"}]},{"formt":"number","n":"66"}]})))))); })(null, (_f_eq(null, (_f_m66(null, _v_sub)), 66))))
(_f_set_method(null, _v_LquuxG, "mid", (function(_key_, _v_quux, _v_x){ lisp_arity_min_max(arguments.length, 3, 3); lisp_check_type(_v_quux, _v_LquuxG); return ((_v_x)); })))
(_f_mid = (function(_key_){ var _v_fast_arguments = arguments; return ((((function(_key_, _v_obj){ lisp_arity_min_max(arguments.length, 2, 2); return (((_f_fast_apply(null, (_f_get_method(null, _v_obj, "mid")), _v_fast_arguments)))); })(null, (_f_list_elt(null, _v_fast_arguments, 1)))))); }))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"mid"},{"formt":"symbol","name":"quux"},{"formt":"number","n":"12"}]},{"formt":"number","n":"12"}]})))))); })(null, (_f_eq(null, (_f_mid(null, _v_quux, 12)), 12))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"mid"},{"formt":"symbol","name":"sub"},{"formt":"number","n":"12"}]},{"formt":"number","n":"12"}]})))))); })(null, (_f_eq(null, (_f_mid(null, _v_sub, 12)), 12))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; } else { var _v_k = undefined; } return ((_v_k)); })(lisp_fast_string_dict({ "%k": 1,  }))), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"k"}]}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; } else { var _v_k = undefined; } return ((_v_k)); })(null)), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"k"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; } else { var _v_k = undefined; } return ((_v_k)); })(lisp_fast_string_dict({ "%k": 1,  }), 10)), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"k"}]},{"formt":"number","n":"10"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; } else { var _v_k = undefined; } return ((_v_k)); })(null, 10)), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"a"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"10"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; } else { var _v_k = undefined; } return ((_v_a)); })(lisp_fast_string_dict({ "%k": 1,  }), 10)), 10))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"a"}]},{"formt":"number","n":"10"}]},{"formt":"number","n":"10"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; } else { var _v_k = undefined; } return ((_v_a)); })(null, 10)), 10))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_k)); })(lisp_fast_string_dict({ "%k": 1,  }))), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_j)); })(lisp_fast_string_dict({ "%k": 1,  }))), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"k"}]}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_k)); })(null)), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"j"}]}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_j)); })(null)), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"j"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_j)); })(lisp_fast_string_dict({ "%k": 1,  }), 10)), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"j"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"j:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_j)); })(lisp_fast_string_dict({ "%j": 1,  }), 10)), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"j"}]},{"formt":"number","n":"10"}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_j)); })(null, 10)), _v_null))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"a"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"10"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_a)); })(lisp_fast_string_dict({ "%k": 1,  }), 10)), 10))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"a"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"j:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"10"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_a)); })(lisp_fast_string_dict({ "%j": 1,  }), 10)), 10))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"symbol","name":"k"},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"a"}]},{"formt":"number","n":"10"}]},{"formt":"number","n":"10"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = undefined; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = undefined; } else { var _v_k = undefined; var _v_j = undefined; } return ((_v_a)); })(null, 10)), 10))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_k)); })(lisp_fast_string_dict({ "%k": 1,  }))), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"4"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_j)); })(lisp_fast_string_dict({ "%k": 1,  }))), 4))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"k"}]}]},{"formt":"number","n":"3"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_k)); })(null)), 3))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"j"}]}]},{"formt":"number","n":"4"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_j)); })(null)), 4))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"j"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"4"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_j)); })(lisp_fast_string_dict({ "%k": 1,  }), 10)), 4))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"j"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"j:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_j)); })(lisp_fast_string_dict({ "%j": 1,  }), 10)), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"j"}]},{"formt":"number","n":"10"}]},{"formt":"number","n":"4"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_j)); })(null, 10)), 4))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"a"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"10"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_a)); })(lisp_fast_string_dict({ "%k": 1,  }), 10)), 10))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"a"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"j:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"10"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_a)); })(lisp_fast_string_dict({ "%j": 1,  }), 10)), 10))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"number","n":"4"}]}]},{"formt":"symbol","name":"a"}]},{"formt":"number","n":"10"}]},{"formt":"number","n":"10"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = 4; } else { var _v_k = 3; var _v_j = 4; } return ((_v_a)); })(null, 10)), 10))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"symbol","name":"k"}]}]},{"formt":"symbol","name":"j"}]},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = _v_k; } else { var _v_k = 3; var _v_j = _v_k; } return ((_v_j)); })(lisp_fast_string_dict({ "%k": 1,  }))), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"symbol","name":"k"}]}]},{"formt":"symbol","name":"j"}]}]},{"formt":"number","n":"3"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = _v_k; } else { var _v_k = 3; var _v_j = _v_k; } return ((_v_j)); })(null)), 3))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"symbol","name":"k"}]}]},{"formt":"symbol","name":"j"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = _v_k; } else { var _v_k = 3; var _v_j = _v_k; } return ((_v_j)); })(lisp_fast_string_dict({ "%k": 1,  }), 10)), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"symbol","name":"k"}]}]},{"formt":"symbol","name":"j"}]},{"formt":"number","n":"10"},{"formt":"symbol","name":"j:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = _v_k; } else { var _v_k = 3; var _v_j = _v_k; } return ((_v_j)); })(lisp_fast_string_dict({ "%j": 1,  }), 10)), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"a"},{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"symbol","name":"k"}]}]},{"formt":"symbol","name":"j"}]},{"formt":"number","n":"10"}]},{"formt":"number","n":"3"}]})))))); })(null, (_f_eq(null, ((function(_key_, _v_a){ lisp_arity_min_max(arguments.length, 2, 2); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = _v_k; } else { var _v_k = 3; var _v_j = _v_k; } return ((_v_j)); })(null, 10)), 3))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"&all-keys"},{"formt":"symbol","name":"keys"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"get"},{"formt":"symbol","name":"keys"},{"formt":"string","s":"k"}]}]},{"formt":"symbol","name":"k:"},{"formt":"number","n":"1"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = _v_k; } else { var _v_k = 3; var _v_j = _v_k; } var _v_keys = _key_ ? _key_ : lisp_fast_string_dict({}); return (((_f_get(null, _v_keys, "k")))); })(lisp_fast_string_dict({ "%k": 1,  }))), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"funcall"},{"formt":"compound","elts":[{"formt":"symbol","name":"lambda"},{"formt":"compound","elts":[{"formt":"symbol","name":"&key"},{"formt":"compound","elts":[{"formt":"symbol","name":"k"},{"formt":"number","n":"3"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"j"},{"formt":"symbol","name":"k"}]},{"formt":"symbol","name":"&all-keys"},{"formt":"symbol","name":"keys"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"get"},{"formt":"symbol","name":"keys"},{"formt":"string","s":"j"}]}]}]},{"formt":"symbol","name":"null"}]})))))); })(null, (_f_eq(null, ((function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%k" in _key_) var _v_k = _key_["%k"]; else var _v_k = 3; if ("%j" in _key_) var _v_j = _key_["%j"]; else var _v_j = _v_k; } else { var _v_k = 3; var _v_j = _v_k; } var _v_keys = _key_ ? _key_ : lisp_fast_string_dict({}); return (((_f_get(null, _v_keys, "j")))); })(null)), _v_null))))
(lisp_is_true((typeof _v_dict != "undefined")) ? _v_null : ((_v_dict = (_f_Lstring_dictG(null)))))
(_f_put(null, _v_dict, "foo", 1))
(_f_put(null, _v_dict, "bar", 2))
(_f_x = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%foo" in _key_) var _v_foo = _key_["%foo"]; else var _v_foo = undefined; if ("%bar" in _key_) var _v_bar = _key_["%bar"]; else var _v_bar = undefined; } else { var _v_foo = undefined; var _v_bar = undefined; } return ((_v_foo)); }))
(_f_y = (function(_key_){ lisp_arity_min_max(arguments.length, 1, 1); if (_key_) { if ("%foo" in _key_) var _v_foo = _key_["%foo"]; else var _v_foo = undefined; if ("%bar" in _key_) var _v_bar = _key_["%bar"]; else var _v_bar = undefined; } else { var _v_foo = undefined; var _v_bar = undefined; } return ((_v_bar)); }))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"apply"},{"formt":"compound","elts":[{"formt":"symbol","name":"function"},{"formt":"symbol","name":"x"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"list"}]},{"formt":"symbol","name":"dict"}]},{"formt":"number","n":"1"}]})))))); })(null, (_f_eq(null, (_f_apply(null, _f_x, (_f_list(null)), _v_dict)), 1))))
((function(_key_, _v_result){ lisp_arity_min_max(arguments.length, 2, 2); return (((lisp_is_true(_v_result) ? _v_result : ((_f_print(null, "assertion failed")), (_f_print(null, {"formt":"compound","elts":[{"formt":"symbol","name":"eq"},{"formt":"compound","elts":[{"formt":"symbol","name":"apply"},{"formt":"compound","elts":[{"formt":"symbol","name":"function"},{"formt":"symbol","name":"y"}]},{"formt":"compound","elts":[{"formt":"symbol","name":"list"}]},{"formt":"symbol","name":"dict"}]},{"formt":"number","n":"2"}]})))))); })(null, (_f_eq(null, (_f_apply(null, _f_y, (_f_list(null)), _v_dict)), 2))))
//endfasl

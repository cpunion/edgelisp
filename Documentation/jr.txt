-*- outline -*-

* JavaScript Representation (JR)

** vardef -- define a global variable

{ jrt: "vardef", name: <<string>>, value: <<jr>> }

** funapp -- call a function

{ jrt: "funapp", fun: <<fun_jr>>, args: <<arg_jrs>> }

** function -- create anonymous function

{ jrt: "function", params: <<param_names>>, body: <<body_jr>> }

** string -- string literal

{ jrt: "string", s: <<string>> }

** var -- access a variable's value

{ jrt: "var", name: <<string>> }

** multi -- multiple expressions in a row

{ jrt: "multi", exprs: <<jrs>> }

** obj -- object literal

{ jrt: "obj" [,props: <<object>>] [,proto: <<proto_jr>>] }

props: a dictionary with JRs as values
proto: JR for __proto__

** setprop -- set an object's property

{ jrt: "setprop", obj: <<object_jr>>, name: <<string>>, value: <<value_jr>> }

** invoke -- invoke a method on an object

{ jrt: "invoke", name: <<string>>, params: <<param_jrs>> }

params: JRs for parameters (object is first element)

** set -- update variable

{ jrt: "set", name: <<string>>, value: <<value_jr>> }

** finally -- stack unwind protection

{ jrt: "finally", protected: <<protected_jr>>, cleanup: <<cleanup_jr>> }

** throw -- raise exception

{ jrt: "throw", exception: <<exception_jr>> }

** catch -- handle exception

{ jrt: "catch", handlers: <<handlers>>, body: <<body_jr>> }

handlers: a list of { class: <<class_jr>>, function: <<function_jr>> }

** callec -- call with escape continuation

{ jrt: "callec", fun: <<fun_jr>> }

** bind -- dynamic binding (should really be a macro)

{ jrt: "bind", bindings: <<bindings>> }

bindings: a list of [ <<name>>, <<value_ir>> ] pairs
name: a string

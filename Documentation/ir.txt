-*- outline -*-

* Intermediate Representation (IR)

** string

{ irt: "string", s: <<string>> }

*** Description

A literal string.

** lambda

{ irt: "lambda", req_params: <<req_param_names>>, body: <<body_ir>> }

req_param_names: an array of strings
body_ir: IR of the lambda's body

*** Description

First-class function abstraction.

** progn

** defparameter

** defun

{ irt: "defun", name: <<name>>, lambda: <<lambda_ir>> }

name: a string
lambda_ir: IR for the function's body

*** Description

Registers a function in the global environment.

** let

** flet

** function

{ irt: "function", name: <<name>> }

name: the function name, a string

*** Description

Accesses the function binding with the given name, i.e. performs a
lookup in the function namespace.

** funcall

{ irt: "funcall", fun: <<fun_ir>> }

fun_ir: IR for function to call, evaluated

*** Description

Calls a function supplied as parameter.

** defmethod

** defgeneric

** defclass

** unwind-protect

** catch

** handle

** throw

** setq

** call-with-escape-continuation, call/ec

** defmacro

** quasiquote, unquote, unquote-splicing

** if

** the

** eval

** var

{ irt: "var", name: <<string>> }

*** Description

Accesses the value of the variable.

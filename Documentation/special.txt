-*- outline -*-

* Special forms

** lambda

(lambda lambda-list body)

body: a form

** (lambda-list)

A list of symbols or type expressions (see type-expr.txt).

** apply

(apply fun &rest args)

fun: a function, evaluated
args: arguments, each evaluated

** defun

(defun name lambda-list body)

name: a symbol
body: a form

** function

(function name)

name: a symbol

** defclass

(defclass name &rest member_names)

name: symbol
member_names: a list of symbols

*** Description

Creates a class, binds it in the global environment, and for each
member creates a getter generic function called ("." + member) and a
setter generic function called ("." + member + "-setter").

** def

(def name lambda-list body)

name: a symbol
body: a form

*** Description

Binds the method in the class' vtable and (re-)defines a generic
function with the given name, that calls the method.

The first parameter in the lambda list must be typed.

** new

(new class)

class: a form, evaluated

*** Description

Creates a new instance of a class

** set

(set name value)

name: a symbol
value: a form, evaluated

** finally

(finally protected-form cleanup-form)

** throw

(throw exception)

exception: a form, evaluated

** with-handlers

(with-handlers handlers body)

handlers is a list of (class function) pairs

** call/ec, call-with-escape-continuation

(call/ec fun)

** bind

(bind bindings body)

** slot-value

(slot-value obj name)

obj: a form, evaluated
name: a symbol

** set-slot-value

(set-slot-value obj name value)

obj: a form, evaluated
name: a symbol
value: a form, evaluated

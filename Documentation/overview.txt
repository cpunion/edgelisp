-*- outline -*-

* CyberLisp compilation overview

CyberLisp uses a cascade of code representations:

--------------------------------------------


Lisp text
    |
    | parser
    V
  forms
    |
    | decoder
    V
intermediate representation (IR)
    |
    | compiler 
    V
JavaScript representation (JR)
    |
    | emitter
    V
JavaScript text


--------------------------------------------

NOTE: The REPL will print these intermediate representations, when
debugging is enabled with the "/d" command.

** Example

The Lisp code 

  (lambda () x)

is first parsed into forms (S-expressions), an "objectified"
representation of the nested list structure of Lisp.

  [{formt:"compound", elts:[{formt:"symbol", name:"lambda"}, 
                            {formt:"compound", elts:[]}, 
                            {formt:"symbol", name:"x"}]}]

Forms are decoded into intermediate representation (IR), CyberLisp's
"kernel language".

  {irt:"lambda", req_params:[], body:{irt:"var", name:"x"}}

IR is compiled to JavaScript representation (JR), an objectified
representation of JavaScript code.

  {jrt:"function", params:[], body:{jrt:"var", name:"__lispV_x"}})

Finally, JR is emitted to JavaScript code:

  (function() { return __lispV_x; })

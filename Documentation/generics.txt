-*- outline -*-

* Generic Programming in CyberLisp

CyberLisp is a generic programming language.

Generic is a technical term meaning "object orientation done right".

Classes contain virtual lookup tables (vtables) that map method names
to methods.  Methods are lambda functions that take the receiver
object ("this") as first argument.

A generic function is a function that looks up a method in the class
of the reciver.

Method lookup is done via JavaScript's built-in __proto__ dispatch.

** Example

(defclass <dog>)
(def say-something ((<dog> d)) "wooof") ;; install method _and_ define generic function

(defclass <cat>)
(def say-something ((<cat> c)) "meoow")

(say-something (new <dog>)) ;; call generic function. it looks up the method internally
(say-something (new <cat>))

In this example, we create two classes, and each has a method named
SAY-SOMETHING.  This means that the vtables of the classes <DOG> and
<CAT> contain a mapping from the name SAY-SOMETHING to a lambda that
returns "wooof" for a dog, and "meoow" for a cat.

DEF creates a method by installing a lambda in the receiver class'
vtable _and_ DEFUNs a generic function called SAY-SOMETHING in the
global environment.

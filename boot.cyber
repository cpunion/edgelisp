;;; -*-LISP-*-
;;;
;;; CyberLisp: A Lisp that compiles to JavaScript 1.5.
;;;   
;;; Copyright (C) 2008 by Manuel Simoni.
;;;   
;;; CyberLisp is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published
;;; by the Free Software Foundation; either version 2, or (at your
;;; option) any later version.
;;;   
;;; CyberLisp is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; General Public License for more details.
;;; 
;;; You should have received a copy of the GNU General Public License
;;; along with GNU Emacs; see the file COPYING.  If not, write to the
;;; Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;;; Boston, MA 02110-1301, USA.

;;; (defmacro name sig &rest body)  [defmacro-form]
;;;  0        1    2         3
(%%defmacro defmacro
  (%%lambda (defmacro-form)
    `(%%defmacro ,(%%compound-elt defmacro-form 1)
       (%%lambda (%%form)         
         (%%compound-apply            
           (%%lambda ,(%%compound-elt defmacro-form 2)             
             (%%progn               
               ,@(%%compound-slice defmacro-form 3)))           
           (%%compound-slice %%form 1))))))

(defmacro progn (&rest body)
  `(%%progn ,@body))

(defmacro lambda (sig &rest body)
  `(%%lambda ,sig (progn ,@body)))

(defmacro defun (name sig &rest body)
  `(%%defun ,name (lambda ,sig ,@body)))

(defmacro defparameter (name value)
  `(%%defparameter ,name ,value))

(defmacro if (test consequent &opt (alternative `null))
  `(%%if ,test ,consequent ,alternative))

(defmacro when (test &rest consequent)
  `(if ,test (progn ,@consequent) null))

(defmacro unless (test &rest alternative)
  `(if ,test null (progn ,@alternative)))

(defmacro let (bindings &rest body)
  `(%%funcall (lambda ,(%%compound-map (lambda (b) 
                                         (%%compound-elt b 0))
                                       bindings)
                ,@body)
              ,@(%%compound-map (lambda (b) 
                                  (%%compound-elt b 1)) 
                                bindings)))

(defmacro macroexpand-1 (form)
  `(%%macroexpand-1 ,form))

(defmacro print (object)
  `(%%print ,object))

(defmacro eq (a b)
  `(%%eq ,a ,b))

(defun assert (test &opt (msg "Assertion failed"))
  (unless test
    (print msg)))

(defun not (x)
  (if x false true))

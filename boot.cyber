;; -*- LISP -*-

;; (defmacro name sig &rest body)
;;  0        1    2         3
(%%defmacro defmacro
  (%%lambda (defmacro-form)
    `(%%defmacro ,(%%compound-elt defmacro-form 1)
       (%%lambda (%%form)         
         (%%compound-apply            
           (%%lambda ,(%%compound-elt defmacro-form 2)             
             (%%progn               
               ,@(%%compound-slice defmacro-form 3)))           
           (%%compound-slice %%form 1))))))

(defmacro progn (&rest body)
  `(%%progn ,@body))

(defmacro lambda (sig &rest body)
  `(%%lambda ,sig (progn ,@body)))

(defmacro defun (name sig &rest body)
  `(%%defun ,name (lambda ,sig ,@body)))

(defmacro defparameter (name value)
  `(%%defparameter ,name ,value))

(defmacro if (test consequent alternative)
  `(%%if ,test ,consequent ,alternative))

(defmacro when (test &rest consequent)
  `(if ,test (progn ,@consequent) null))

(defmacro unless (test &rest alternative)
  `(if ,test null (progn ,@alternative)))

(defmacro let (bindings &rest body)
  `(%%funcall (lambda ,(%%compound-map (lambda (b) 
                                         (%%compound-elt b 0))
                                       bindings)
                ,@body)
              ,@(%%compound-map (lambda (b) 
                                  (%%compound-elt b 1)) 
                                bindings)))

(defmacro macroexpand-1 (form)
  `(%%macroexpand-1 ,form))
